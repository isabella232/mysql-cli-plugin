// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotal-cf/mysql-cli-plugin/mysql-tools/plugin"
)

type FakeCFClient struct {
	ListServicesByQueryStub        func(url.Values) ([]cfclient.Service, error)
	listServicesByQueryMutex       sync.RWMutex
	listServicesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicesByQueryReturns struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) ListServicesByQuery(arg1 url.Values) ([]cfclient.Service, error) {
	fake.listServicesByQueryMutex.Lock()
	ret, specificReturn := fake.listServicesByQueryReturnsOnCall[len(fake.listServicesByQueryArgsForCall)]
	fake.listServicesByQueryArgsForCall = append(fake.listServicesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServicesByQuery", []interface{}{arg1})
	fake.listServicesByQueryMutex.Unlock()
	if fake.ListServicesByQueryStub != nil {
		return fake.ListServicesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServicesByQueryReturns.result1, fake.listServicesByQueryReturns.result2
}

func (fake *FakeCFClient) ListServicesByQueryCallCount() int {
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	return len(fake.listServicesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicesByQueryArgsForCall(i int) url.Values {
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	return fake.listServicesByQueryArgsForCall[i].arg1
}

func (fake *FakeCFClient) ListServicesByQueryReturns(result1 []cfclient.Service, result2 error) {
	fake.ListServicesByQueryStub = nil
	fake.listServicesByQueryReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicesByQueryReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.ListServicesByQueryStub = nil
	if fake.listServicesByQueryReturnsOnCall == nil {
		fake.listServicesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.CFClient = new(FakeCFClient)
