// Code generated by counterfeiter. DO NOT EDIT.
package commandfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/plugin"
	"github.com/pivotal-cf/mysql-cli-plugin/mysql-tools/command"
)

type FakeRouter struct {
	MatchStub        func(string, plugin.CliConnection, []string) error
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 string
		arg2 plugin.CliConnection
		arg3 []string
	}
	matchReturns struct {
		result1 error
	}
	matchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouter) Match(arg1 string, arg2 plugin.CliConnection, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.matchMutex.Lock()
	ret, specificReturn := fake.matchReturnsOnCall[len(fake.matchArgsForCall)]
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 string
		arg2 plugin.CliConnection
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("Match", []interface{}{arg1, arg2, arg3Copy})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.matchReturns
	return fakeReturns.result1
}

func (fake *FakeRouter) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeRouter) MatchCalls(stub func(string, plugin.CliConnection, []string) error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = stub
}

func (fake *FakeRouter) MatchArgsForCall(i int) (string, plugin.CliConnection, []string) {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	argsForCall := fake.matchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRouter) MatchReturns(result1 error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouter) MatchReturnsOnCall(i int, result1 error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	if fake.matchReturnsOnCall == nil {
		fake.matchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.matchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ command.Router = new(FakeRouter)
