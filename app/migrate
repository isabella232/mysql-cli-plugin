#!/usr/bin/env bash

# Copyright (C) 2018-Present Pivotal Software, Inc. All rights reserved.
#
# This program and the accompanying materials are made available under the terms of the under the Apache License,
# Version 2.0 (the "License‚Äù); you may not use this file except in compliance with the License. You may obtain a copy
# of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

set -euo pipefail

SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
export PATH="$SCRIPT_DIR/assets:$PATH"

if [[ $# != 2 ]]; then
  echo "Usage: $0 <source service> <target service>"
  exit 64
fi

src_svc="$1"
tgt_svc="$2"

function get_service_name() {
  local service_instance_name="$1"
  jq --raw-output \
     --arg svc "${service_instance_name}" \
     '. | to_entries | [ .[] | select(.value[].name == $svc) ] | .[0].key' \
     <<< "${VCAP_SERVICES}"
}

function vcap_credentials() {
  local service_instance_name="$1"

  jq --raw-output \
     --arg svc "${service_instance_name}" \
     '.[][] | select(.name == $svc) | .credentials' \
     <<< "${VCAP_SERVICES}"
}

function vcap_cred() {
  local name="$1"
  local creds="$2"

  jq --raw-output ".${name}" <<< "${creds}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to extract .${name} from creds='${creds}'" 1>&2
  fi
}

function backup_db_names() {
  local src_creds="$(vcap_credentials "${src_svc}")"
  local service_name="$(get_service_name "${src_svc}")"

  local use_tls="$(jq 'has("tls")' <<<"${src_creds}")"
  local mysql_tls_opts=""

  if [[ "${use_tls}" == "true" ]]; then
    mysql_tls_opts="--ssl-mode=VERIFY_IDENTITY --ssl-capath=/etc/ssl/certs"
  fi

  MYSQL_PWD="$(vcap_cred "password" "${src_creds}" )" \
    mysql --user="$(vcap_cred "username" "${src_creds}" )" \
    --host="$(vcap_cred "hostname" "${src_creds}" )" \
    --port="$(vcap_cred "port" "${src_creds}" )" \
    ${mysql_tls_opts} \
    -sse "SHOW DATABASES" \
    | egrep -v "^(mysql|sys|information_schema|performance_schema|cf_metadata)$"
}

function backup_source() {

  local src_creds="$(vcap_credentials "${src_svc}")"
  local use_tls="$(jq 'has("tls")' <<<"${src_creds}")"
  local mysql_tls_opts=""

  if [[ "${use_tls}" == "true" ]]; then
    mysql_tls_opts="--ssl-mode=VERIFY_IDENTITY --ssl-capath=/etc/ssl/certs"
  fi

  mapfile -t dbs <<< "$(backup_db_names)"

  if [[ "${#dbs[@]}" -gt 1 ]]; then
    dbs=("--databases" "${dbs[@]}")
  fi

  MYSQL_PWD="$(vcap_cred "password" "${src_creds}" )" \
    mysqldump --user="$(vcap_cred "username" "${src_creds}" )" \
              --host="$(vcap_cred "hostname" "${src_creds}" )" \
              --port="$(vcap_cred "port" "${src_creds}" )" \
              --max-allowed-packet=1G \
              --single-transaction \
              --routines \
              --events \
              --set-gtid-purged=off \
              ${mysql_tls_opts} \
              "${dbs[@]}"
}

function restore_target() {
  local tgt_creds="$(vcap_credentials "${tgt_svc}")"
  local use_tls="$(jq 'has("tls")' <<<"${tgt_creds}")"
  local mysql_tls_opts=""

  if [[ "${use_tls}" == "true" ]]; then
    mysql_tls_opts="--ssl-mode=VERIFY_IDENTITY --ssl-capath=/etc/ssl/certs"
  fi

  MYSQL_PWD="$(vcap_cred "password" "${tgt_creds}")" \
    mysql --user="$(vcap_cred "username" "${tgt_creds}")" \
          --host="$(vcap_cred "hostname" "${tgt_creds}")" \
          --port="$(vcap_cred "port" "${tgt_creds}")" \
          --database="$(vcap_cred "name" "${tgt_creds}")" \
          ${mysql_tls_opts}
}

backup_source | restore_target
